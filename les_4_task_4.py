# Написать два алгоритма нахождения i-го по счёту простого числа.
# Функция нахождения простого числа должна принимать на вход натуральное и возвращать
# соответствующее простое число.
# Проанализировать скорость и сложность алгоритмов.
# Первый — с помощью алгоритма «Решето Эратосфена».
# Примечание. Алгоритм «Решето Эратосфена» разбирался на одном из прошлых уроков.
# Используйте этот код и попробуйте его улучшить/оптимизировать под задачу.
# Второй — без использования «Решета Эратосфена».
# Примечание. Вспомните классический способ проверки числа на простоту.
# Пример работы программ:
# sieve(2) 3
# prime(4) 7
# sieve(5) 11
# prime(1)  2
# Примечание по профилированию кода: для получения достоверных результатов при замере
# времени необходимо исключить/заменить команды print и input в анализируемом коде.
'''
HOLE = 0
n = 1000
sieve = [i for i in range(n)]
sieve[1] = HOLE
for i in range(2, n):
    if sieve[i] != HOLE:
        j = i + i
        while j < n:
            sieve[j] = HOLE
            j += i

print(sieve)
res = [item for item in sieve if item != HOLE]
print(res)
'''

'''
n = int(input('D'))

# список заполняется значениями от 0 до n
a = []
for i in range(n + 1):
    a.append(i)

# Вторым элементом является единица,
# которую не считают простым числом
# забиваем ее нулем.
a[1] = 0

# начинаем с 3-го элемента
i = 2
while i <= n:
    # Если значение ячейки до этого
    # не было обнулено,
    # в этой ячейке содержится
    # простое число.
    if a[i] != 0:
        # первое кратное ему
        # будет в два раза больше
        j = i + i
        while j <= n:
            # это число составное,
            # поэтому заменяем его нулем
            a[j] = 0
            # переходим к следующему числу,
            # которое кратно i
            # (оно на i больше)
            j = j + i
    i += 1

# Превращая список во множество,
# избавляемся от всех нулей кроме одного.
a = set(a)
# удаляем ноль
a.remove(0)
print(a)
'''
import cProfile
import timeit


def prime(n):
    lst = []
    for i in range(2, n + 1):
        for j in lst:
            if i % j == 0:
                break
        else:
            lst.append(i)
    print(lst)


print(timeit.timeit('prime(10)', number=1000, globals=globals()))  # 0.0013544932007789612
print(timeit.timeit('prime(100)', number=1000, globals=globals()))  # 0.02477900800295174
print(timeit.timeit('prime(1000)', number=1000, globals=globals()))  # 0.6990160918794572
cProfile.run('prime(10000)')
